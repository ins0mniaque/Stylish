<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ß="clr-namespace:Stylish">

    <Style x:Key="Control.FocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Margin="-4"
                            BorderBrush="{Binding (TextElement.Foreground),
                                                  RelativeSource={RelativeSource Self}}"
                            BorderThickness="2"
                            CornerRadius="4"
                            SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static SystemParameters.FocusVisualStyleKey}" BasedOn="{StaticResource Control.FocusVisualStyle}" />

    <Style x:Key="Focusable.Style" TargetType="FrameworkElement">
        <Setter Property="FocusVisualStyle" Value="{StaticResource Control.FocusVisualStyle}" />
    </Style>

    <ControlTemplate x:Key="Button.Template" TargetType="{x:Type ButtonBase}">
        <Grid>
            <Border Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding ß:Element.CornerRadius}" />
            <Border Background="{TemplateBinding ß:Element.Highlight}"
                    CornerRadius="{TemplateBinding ß:Element.CornerRadius}"
                    Opacity="{TemplateBinding ß:Element.HighlightOpacity}" />
            <ContentPresenter Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="Button.Style" TargetType="ButtonBase" BasedOn="{StaticResource Focusable.Style}">
        <Setter Property="Background"             Value="Transparent" />
        <Setter Property="BorderThickness"        Value="0" />
        <Setter Property="ß:Element.CornerRadius" Value="4" />
        <Setter Property="ß:Element.Highlight"    Value="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template"               Value="{StaticResource Button.Template}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ß:Element.HighlightOpacity" Value="0.25" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="ß:Element.Highlight"        Value="Black" />
                <Setter Property="ß:Element.HighlightOpacity" Value="0.10"   />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="CheckBox.Template" TargetType="CheckBox">
        <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
                <Grid>
                    <Border x:Name="Border"
                            Background="{TemplateBinding BorderBrush}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding ß:Element.CornerRadius}" />
                    <Border Background="{TemplateBinding ß:Element.Highlight}"
                            CornerRadius="{TemplateBinding ß:Element.CornerRadius}"
                            Opacity="{TemplateBinding ß:Element.HighlightOpacity}" />
                    <TextBlock x:Name="CheckMark"
                               Padding="2"
                               Foreground="{TemplateBinding ß:Element.IconBrush}"
                               FontSize="{TemplateBinding ß:Element.IconSize}"
                               FontFamily="Segoe MDL2 Assets"
                               Text="&#xE73E;" />
                </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              RecognizesAccessKey="True" />
        </BulletDecorator>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter TargetName="Border"    Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="CheckMark" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter TargetName="CheckMark" Property="Text" Value="&#xE73C;" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ß:DoubleAddConverter x:Key="CheckBox.IconSize.Converter" Operand="1" />

    <Style x:Key="CheckBox.Style" TargetType="CheckBox" BasedOn="{StaticResource Focusable.Style}">
        <Setter Property="Background"               Value="{DynamicResource {x:Static ß:SystemTheme.WindowKey}}" />
        <Setter Property="BorderBrush"              Value="{DynamicResource {x:Static ß:SystemTheme.AccentKey}}" />
        <Setter Property="ß:Element.CornerRadius"   Value="2"       />
        <Setter Property="Padding"                  Value="6 0 0 0" />
        <Setter Property="VerticalContentAlignment" Value="Center"  />
        <Setter Property="ß:Element.IconBrush"      Value="{DynamicResource {x:Static ß:SystemTheme.AccentTextKey}}" />
        <Setter Property="ß:Element.IconSize"       Value="{Binding FontSize, RelativeSource={RelativeSource Self},
                                                                    Converter={StaticResource CheckBox.IconSize.Converter}}" />
        <Setter Property="ß:Element.Highlight"      Value="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template"                 Value="{StaticResource CheckBox.Template}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ß:Element.HighlightOpacity" Value="0.25" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="ß:Element.Highlight"        Value="Black" />
                <Setter Property="ß:Element.HighlightOpacity" Value="0.10"   />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="Expander.ToggleButton.Template" TargetType="{x:Type ToggleButton}">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"    />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            <Border x:Name="IconButton"
                    Grid.Column="1"
                    Background="Transparent"
                    Margin="{TemplateBinding Padding, Converter={x:Static ß:Converters.RightThickness}}"
                    Padding="8"
                    VerticalAlignment="Center"
                    CornerRadius="{TemplateBinding ß:Element.CornerRadius}">
                <Grid>
                    <Border x:Name="Highlight"
                            Margin="-8"
                            Background="{TemplateBinding ß:Element.Highlight}"
                            CornerRadius="{TemplateBinding ß:Element.CornerRadius}"
                            Opacity="0" />
                    <TextBlock x:Name="Icon"
                               FontFamily="Segoe MDL2 Assets"
                               Foreground="{TemplateBinding Foreground}"
                               RenderTransformOrigin="0.5 0.5"
                               Text="&#xE011;">
                        <TextBlock.RenderTransform>
                            <RotateTransform />
                        </TextBlock.RenderTransform>
                    </TextBlock>
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Icon"
                                             Storyboard.TargetProperty="RenderTransform.Angle"
                                             To="180" Duration="00:00:00.167" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Icon"
                                             Storyboard.TargetProperty="RenderTransform.Angle"
                                             To="0" Duration="00:00:00.167" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="IconButton" Property="Background" Value="{DynamicResource {x:Static ß:SystemTheme.AccentKey}}" />
                <Setter TargetName="Icon"       Property="Foreground" Value="{DynamicResource {x:Static ß:SystemTheme.AccentTextKey}}" />
            </Trigger>
            <Trigger SourceName="IconButton" Property="IsMouseOver" Value="True">
                <Setter TargetName="Highlight" Property="Opacity" Value="0.25" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Expander.Template" TargetType="Expander">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding ß:Element.CornerRadius}">
            <StackPanel>
                <ToggleButton Foreground="{TemplateBinding Foreground}"
                              Padding="{TemplateBinding Padding}"
                              Content="{TemplateBinding Header}"
                              ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              Template="{StaticResource Expander.ToggleButton.Template}"
                              IsChecked="{Binding IsExpanded,
                                                  Mode=TwoWay,
                                                  RelativeSource={RelativeSource TemplatedParent}}" />
                <Border x:Name="Content"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Visibility="Collapsed">
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Border>
            </StackPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="Content" Property="Visibility" Value="Visible" />
                <Setter TargetName="Content" Property="BorderThickness"
                        Value="{Binding BorderThickness,
                                        RelativeSource={RelativeSource TemplatedParent},
                                        Converter={x:Static ß:Converters.TopThickness}}" />
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Content"
                                             Storyboard.TargetProperty="Opacity"
                                             From="0" To="1" Duration="00:00:00.167" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="Expander.Style" TargetType="Expander" BasedOn="{StaticResource Focusable.Style}">
        <Setter Property="BorderThickness"        Value="0"  />
        <Setter Property="Padding"                Value="11" />
        <Setter Property="ß:Element.CornerRadius" Value="4"  />
        <Setter Property="ß:Element.Highlight"    Value="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template"               Value="{StaticResource Expander.Template}" />
    </Style>

    <Style x:Key="ItemsControl.Style" TargetType="ItemsControl" BasedOn="{StaticResource Focusable.Style}">
        <Setter Property="IsTabStop" Value="False" />
    </Style>

    <Storyboard x:Key="Spinner.Storyboard">
        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                       Storyboard.TargetName="LargeArc"
                                       Storyboard.TargetProperty="RenderTransform.Angle">
            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"   />
            <LinearDoubleKeyFrame KeyTime="0:0:3.000" Value="360" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                       Storyboard.TargetName="SmallArc"
                                       Storyboard.TargetProperty="RenderTransform.Angle">
            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"    />
            <LinearDoubleKeyFrame KeyTime="0:0:2.000" Value="-360" />
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <ControlTemplate x:Key="Spinner.Template" TargetType="Control">
        <ControlTemplate.Resources>
            <Style TargetType="Path">
                <Setter Property="RenderTransformOrigin" Value="0.5 0.5" />
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform />
                    </Setter.Value>
                </Setter>
            </Style>
        </ControlTemplate.Resources>
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}"
                CornerRadius="{TemplateBinding ß:Element.CornerRadius}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <Viewbox HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Grid>
                    <Path x:Name="LargeArc"
                          Stroke="{TemplateBinding Foreground}"
                          StrokeThickness="10"
                          Data="M45,5 A40,40 0 1 0 85,45" />
                    <Path x:Name="SmallArc"
                          Opacity="0.3"
                          Stroke="{TemplateBinding Foreground}"
                          StrokeThickness="11.5"
                          Data="M20,30 A30,30 0 1 1 63,70" />
                </Grid>
            </Viewbox>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Name="Animation" Storyboard="{StaticResource Spinner.Storyboard}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="Animation" />
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="Spinner.Style" TargetType="Control">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static ß:SystemTheme.AccentKey}}" />
        <Setter Property="Template"   Value="{StaticResource Spinner.Template}" />
    </Style>

    <Style TargetType="Button"       BasedOn="{StaticResource Button.Style}"       />
    <Style TargetType="RepeatButton" BasedOn="{StaticResource Button.Style}"       />
    <Style TargetType="ToggleButton" BasedOn="{StaticResource Button.Style}"       />
    <Style TargetType="CheckBox"     BasedOn="{StaticResource CheckBox.Style}"     />
    <Style TargetType="Expander"     BasedOn="{StaticResource Expander.Style}"     />
    <Style TargetType="ItemsControl" BasedOn="{StaticResource ItemsControl.Style}" />

</ResourceDictionary>